"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import environ

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []

ADMIN_ENABLED = False  # for Turn on and off Admin

SITE_ID = 1  # Use Only 1 Site

APPEND_SLASH = True

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

PROJECT_APPS = [
    "api",
    "accounts.apps.AccountsConfig",
    "chats.apps.ChatsConfig",
    "comments.apps.CommentsConfig",
    "follows.apps.FollowsConfig",
    "likes.apps.LikesConfig",
    "posts.apps.PostsConfig",
    "images.apps.ImagesConfig",
    "products.apps.ProductsConfig",
    "profiles.apps.ProfilesConfig",
]

THIRD_PARTY_APPS = [
    "channels",  # django-channels
    "channels_pulsar",  # channels-pulsar
    "corsheaders",  # django-cors-headers
    "rest_framework",  # Django Rest Framework
    "rest_framework.authtoken",  # Django Rest Framework
    "django_filters",  # Django Rest Framework Filter
    "rest_framework_simplejwt",  # SimpleJWT
    "rest_framework_simplejwt.token_blacklist",  # SimpleJWT
    "dj_rest_auth",  # dj-rest-auth
    "dj_rest_auth.registration",  # dj-rest-auth
    "drf_spectacular",
    "allauth",  # allauth
    "allauth.account",  # allauth
    "allauth.socialaccount",  # allauth[socialaccount]
    "allauth.socialaccount.providers.google",  # allauth[socialaccount]
]

INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # django-cors-headers
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # django-allauth
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("POSTGRES_DB"),
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "HOST": env("POSTGRES_HOST"),
        "PORT": env("POSTGRES_PORT"),
    }
}


# https://github.com/jazzband/django-redis

CACHE = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{env("REDIS_HOST")}:{env("REDIS_PORT")}/{env("REDIS_CACHE_DB")}",
        "OPTION": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PICKLE_VERSION": -1,
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django REST Framework setting
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "dj_rest_auth": "10000/day",
        "anon": "10000/day",
        "user": "30000/h",
        "GetPresignedUrlView": "20000/day",
    },
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
}


# https://github.com/Tivix/django-rest-auth/issues/298

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)

# Django Simple JWT setting
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "handle",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}


# Django-allauth settings
# https://docs.allauth.org/en/latest/socialaccount/provider_configuration.html


ACCOUNT_ADAPTER = "accounts.adapter.AccountAdapter"
SOCIALACCOUNT_ADAPTER = "accounts.adapter.SocialAccountAdapter"
AUTH_USER_MODEL = "accounts.User"  # Change Default User Model
SOCIALACCOUNT_AUTO_SIGNUP = True  # 자동 소셜 로그인 가입
ACCOUNT_EMAIL_REQUIRED = True  # email 필드 사용 o
ACCOUNT_AUTHENTICATION_METHOD = "email"  # 인증 메소드
ACCOUNT_EMAIL_VERIFICATION = "none"  # email 인증 안함 사용하는 경우 mandatory
ACCOUNT_USER_MODEL_USERNAME_FIELD = "handle"  # 유저네임은 중복 불가능

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APPS": [
            {
                "client_id": env("GOOGLE_CLIENT_ID"),
                "secret": env("GOOGLE_SECRET_KEY"),
                "key": "",
            },
        ],
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}


# dj-rest-auth

# If set value to True, the token will be saved
# But compatibility issues raise between allauth and dj-rest-auth
# Only change to True in situations where access_type must be set to offline
SOCIALACCOUNT_STORE_TOKENS = False  # SOCIALACCOUNT_EMAIL_AUTHENTICATION Access Token Store

REST_AUTH = {
    "LOGIN_SERIALIZER": "accounts.serializers.LoginSerializer",
    "USER_DETAILS_SERIALIZER": "accounts.serializers.UserDetailsSerializer",
    "USE_JWT": True,  # dj_rest_auth.views.LoginView use JWT
    "JWT_AUTH_HTTPONLY": True,
    "JWT_AUTH_COOKIE": "access",
    "JWT_AUTH_REFRESH_COOKIE": "refresh_token",
    "JWT_AUTH_COOKIE_USE_CSRF": True,
}

# spectacular

SPECTACULAR_SETTINGS = {
    "TITLE": "Tangerine API",
    "DESCRIPTION": "DRF, ElasticSearch High-level Backend forked from BlogAPI",
    "VERSION": "0.0.2",
    "SERVE_INCLUDE_SCHEMA": False,
    "CONTACT": {
        "name": "tangerinenee",
        "url": "https://github.com/orgs/tangerinenee",
    },
    "LICENSE": {
        "name": "Internal Use Only License (IUOL)",
        "url": "https://github.com/ds5105119/tangerineAPI",
    },
    "SWAGGER_UI_DIST": "//unpkg.com/swagger-ui-dist@5.17.14",
}

# channels

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_pulsar2.layer.PulsarChannelLayer",
        "CONFIG": {
            "pulsar_client_url": "pulsar://broker:6650",
            "admin_url": "http://broker:8080/admin/v2",
            "topic_type": "non-persistent",
            "topic_tenant": "public",
            "topic_namespace": "default",
        },
    },
}

# TangerineAPI

FILE_UPLOAD_PERMISSIONS = "rest_framework.permissions.IsAuthenticated"
FILE_UPLOAD_MAX_MEMORY_SIZE = 1 * (1024**2)  # 1M

BlogAPI = {"UserPostWritable": True}

BASE_URL = env("BASE_URL")
FRONT_URL = env("FRONT_URL")
GOOGLE_REDIRECT_URI = FRONT_URL + env("GOOGLE_REDIRECT_URI")

AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = env("AWS_S3_REGION_NAME")
